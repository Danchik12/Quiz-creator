{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SUCCESS, AUTH_LOGOUT } from './actionTypes';\nexport function auth(email, password, isLogin) {\n  return async dispatch => {\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD8U07p1wdLi2yhRMVF2fgLNMGTYYAZEnU';\n\n    if (isLogin) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD8U07p1wdLi2yhRMVF2fgLNMGTYYAZEnU';\n    }\n\n    const response = await axios.post(url, authData);\n    const data = response.data;\n    const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000);\n    localStorage.setItem('token', data.idToken);\n    localStorage.setItem('userId', data.localId);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess(data.idToken));\n    dispatch(autoLogout(data.expiresIn));\n  };\n}\nexport function autoLogout(time) {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, time * 1000);\n  };\n}\nexport function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: AUTH_LOGOUT\n  };\n}\nexport function authSuccess(token) {\n  return {\n    type: AUTH_SUCCESS,\n    token\n  };\n}\nexport function autoLogin() {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(autoLogout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["D:/Kizune/project/Scraping/Quiz-creator/src/store/action/auth.js"],"names":["axios","AUTH_SUCCESS","AUTH_LOGOUT","auth","email","password","isLogin","dispatch","authData","returnSecureToken","url","response","post","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","idToken","localId","authSuccess","autoLogout","time","setTimeout","logout","removeItem","type","token","autoLogin","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,EAAqBC,WAArB,QAAuC,eAAvC;AAEA,OAAO,SAASC,IAAT,CAAeC,KAAf,EAAqBC,QAArB,EAA8BC,OAA9B,EAAsC;AAC5C,SAAO,MAAMC,QAAN,IAAiB;AACvB,UAAMC,QAAQ,GAAC;AACdJ,MAAAA,KADc;AAEdC,MAAAA,QAFc;AAGdI,MAAAA,iBAAiB,EAAC;AAHJ,KAAf;AAMF,QAAIC,GAAG,GAAG,uGAAV;;AACA,QAAIJ,OAAJ,EAAY;AACXI,MAAAA,GAAG,GAAC,mHAAJ;AACA;;AACD,UAAMC,QAAQ,GAAE,MAAMX,KAAK,CAACY,IAAN,CAAWF,GAAX,EAAeF,QAAf,CAAtB;AACA,UAAMK,IAAI,GAAEF,QAAQ,CAACE,IAArB;AACA,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,IAAI,CAACI,SAAL,GAAiB,IAAjD,CAAvB;AAEAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BN,IAAI,CAACO,OAAlC;AACAF,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BN,IAAI,CAACQ,OAAnC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAsCL,cAAtC;AAEAP,IAAAA,QAAQ,CAAEe,WAAW,CAACT,IAAI,CAACO,OAAN,CAAb,CAAR;AACAb,IAAAA,QAAQ,CAAEgB,UAAU,CAACV,IAAI,CAACI,SAAN,CAAZ,CAAR;AACC,GArBA;AAsBA;AAED,OAAO,SAASM,UAAT,CAAoBC,IAApB,EAAyB;AAC/B,SAAOjB,QAAQ,IAAI;AAClBkB,IAAAA,UAAU,CAAC,MAAM;AAChBlB,MAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,KAFS,EAERF,IAAI,GAAG,IAFC,CAAV;AAGA,GAJD;AAKA;AAED,OAAO,SAASE,MAAT,GAAkB;AACzBR,EAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,gBAAxB;AACC,SAAO;AACNC,IAAAA,IAAI,EAAC1B;AADC,GAAP;AAGA;AAGD,OAAO,SAASoB,WAAT,CAAqBO,KAArB,EAA2B;AAClC,SAAO;AACND,IAAAA,IAAI,EAAC3B,YADC;AAEN4B,IAAAA;AAFM,GAAP;AAIC;AAED,OAAO,SAASC,SAAT,GAAqB;AAC3B,SAAOvB,QAAQ,IAAI;AAClB,UAAMsB,KAAK,GAAGX,YAAY,CAACa,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAI,CAACF,KAAL,EAAY;AACXtB,MAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,KAFD,MAEM;AACL,YAAMZ,cAAc,GAAG,IAAIC,IAAJ,CAASG,YAAY,CAACa,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAIjB,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAiC;AAChCR,QAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,OAFD,MAEM;AACLnB,QAAAA,QAAQ,CAAEe,WAAW,CAACO,KAAD,CAAb,CAAR;AACDtB,QAAAA,QAAQ,CAAEgB,UAAU,CAAC,CAACT,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAkD,IAAnD,CAAZ,CAAR;AACC;AACD;AACD,GAbD;AAeA","sourcesContent":["import axios from 'axios'\r\nimport {AUTH_SUCCESS,AUTH_LOGOUT} from './actionTypes'\r\n\r\nexport function auth (email,password,isLogin){\r\n return async dispatch =>{\r\n \tconst authData={\r\n \t\temail,\r\n \t\tpassword,\r\n \t\treturnSecureToken:true\r\n \t}\r\n \t\r\nlet url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD8U07p1wdLi2yhRMVF2fgLNMGTYYAZEnU'\r\nif (isLogin){\r\n\turl='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD8U07p1wdLi2yhRMVF2fgLNMGTYYAZEnU'\r\n}\r\nconst response =await axios.post(url,authData)\r\nconst data =response.data\r\nconst expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)\r\n\r\nlocalStorage.setItem('token',data.idToken)\r\nlocalStorage.setItem('userId',data.localId)\r\nlocalStorage.setItem('expirationDate',expirationDate)\r\n\r\ndispatch (authSuccess(data.idToken))\r\ndispatch (autoLogout(data.expiresIn))\r\n}\r\n}\r\n\r\nexport function autoLogout(time){\r\n\treturn dispatch => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tdispatch(logout())\r\n\t\t},time * 1000)\r\n\t}\r\n}\r\n\r\nexport function logout() {\r\nlocalStorage.removeItem('token')\r\nlocalStorage.removeItem('userId')\r\nlocalStorage.removeItem('expirationDate')\r\n\treturn {\r\n\t\ttype:AUTH_LOGOUT\r\n\t}\r\n}\r\n\r\n\r\nexport function authSuccess(token){\r\nreturn {\r\n\ttype:AUTH_SUCCESS,\r\n\ttoken\r\n}\r\n}\r\n\r\nexport function autoLogin (){\r\n\treturn dispatch => {\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tif (!token) {\r\n\t\t\tdispatch(logout())\r\n\t\t}else {\r\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n\t\t\tif (expirationDate <= new Date()){\r\n\t\t\t\tdispatch(logout())\r\n\t\t\t}else {\r\n\t\t\t\tdispatch (authSuccess(token))\r\n\t\t\tdispatch (autoLogout((expirationDate.getTime() - new Date().getTime())/1000))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}"]},"metadata":{},"sourceType":"module"}